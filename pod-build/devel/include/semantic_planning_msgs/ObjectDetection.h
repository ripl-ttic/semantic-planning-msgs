// Generated by gencpp from file semantic_planning_msgs/ObjectDetection.msg
// DO NOT EDIT!


#ifndef SEMANTIC_PLANNING_MSGS_MESSAGE_OBJECTDETECTION_H
#define SEMANTIC_PLANNING_MSGS_MESSAGE_OBJECTDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>

namespace semantic_planning_msgs
{
template <class ContainerAllocator>
struct ObjectDetection_
{
  typedef ObjectDetection_<ContainerAllocator> Type;

  ObjectDetection_()
    : header()
    , id(0)
    , position()
    , orientation()
    , has_orientation(false)
    , class(0)  {
    }
  ObjectDetection_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , position(_alloc)
    , orientation(_alloc)
    , has_orientation(false)
    , class(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef uint8_t _has_orientation_type;
  _has_orientation_type has_orientation;

   typedef uint8_t _class_type;
  _class_type class;



  enum {
    UNKNOWN = 0u,
    PERSON = 1u,
    BICYCLE = 2u,
    CAR = 3u,
    MOTORBIKE = 4u,
    AEROPLANE = 5u,
    BUS = 6u,
    TRAIN = 7u,
    TRUCK = 8u,
    BOAT = 9u,
    TRAFFIC_LIGHT = 10u,
    FIRE_HYDRANT = 11u,
    STOP_SIGN = 12u,
    PARKING_METER = 13u,
    BENCH = 14u,
    BIRD = 15u,
    CAT = 16u,
    DOG = 17u,
    HORSE = 18u,
    SHEEP = 19u,
    COW = 20u,
    ELEPHANT = 21u,
    BEAR = 22u,
    ZEBRA = 23u,
    GIRAFFE = 24u,
    BACKPACK = 25u,
    UMBRELLA = 26u,
    HANDBAG = 27u,
    TIE = 28u,
    SUITCASE = 29u,
    FRISBEE = 30u,
    SKIS = 31u,
    SNOWBOARD = 32u,
    SPORTS_BALL = 33u,
    KITE = 34u,
    BASEBALL_BAT = 35u,
    BASEBALL_GLOVE = 36u,
    SKATEBOARD = 37u,
    SURFBOARD = 38u,
    TENNIS_RACKET = 39u,
    BOTTLE = 40u,
    WINE_GLASS = 41u,
    CUP = 42u,
    FORK = 43u,
    KNIFE = 44u,
    SPOON = 45u,
    BOWL = 46u,
    BANANA = 47u,
    APPLE = 48u,
    SANDWICH = 49u,
    ORANGE = 50u,
    BROCCOLI = 51u,
    CARROT = 52u,
    HOT_DOG = 53u,
    PIZZA = 54u,
    DONUT = 55u,
    CAKE = 56u,
    CHAIR = 57u,
    SOFA = 58u,
    POTTEDPLANT = 59u,
    BED = 60u,
    DININGTABLE = 61u,
    TOILET = 62u,
    TVMONITOR = 63u,
    LAPTOP = 64u,
    MOUSE = 65u,
    REMOTE = 66u,
    KEYBOARD = 67u,
    CELL_PHONE = 68u,
    MICROWAVE = 69u,
    OVEN = 70u,
    TOASTER = 71u,
    SINK = 72u,
    REFRIGERATOR = 73u,
    BOOK = 74u,
    CLOCK = 75u,
    VASE = 76u,
    SCISSORS = 77u,
    TEDDY_BEAR = 78u,
    HAIR_DRIER = 79u,
    TOOTHBRUSH = 80u,
  };


  typedef boost::shared_ptr< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectDetection_

typedef ::semantic_planning_msgs::ObjectDetection_<std::allocator<void> > ObjectDetection;

typedef boost::shared_ptr< ::semantic_planning_msgs::ObjectDetection > ObjectDetectionPtr;
typedef boost::shared_ptr< ::semantic_planning_msgs::ObjectDetection const> ObjectDetectionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace semantic_planning_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'semantic_planning_msgs': ['/code/software/ros_workspace/semantic_planning_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa8015cdd5378449d7f0e2159dec04cc";
  }

  static const char* value(const ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa8015cdd5378449ULL;
  static const uint64_t static_value2 = 0xd7f0e2159dec04ccULL;
};

template<class ContainerAllocator>
struct DataType< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "semantic_planning_msgs/ObjectDetection";
  }

  static const char* value(const ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# message header\n\
Header header\n\
\n\
# unique object ID. This must be consistent across non consecutive observations\n\
uint16 id\n\
\n\
# 3D position of the object\n\
geometry_msgs/Point position\n\
\n\
# orientation of the object. Fields are [x,y,z,w]\n\
geometry_msgs/Quaternion orientation\n\
# indicate whether the orientation is provided\n\
bool has_orientation\n\
\n\
# object class. Accepts value from the object classes enum below\n\
uint8 class\n\
\n\
# ENUM: object classes\n\
uint8 UNKNOWN=0\n\
uint8 PERSON=1\n\
uint8 BICYCLE=2\n\
uint8 CAR=3\n\
uint8 MOTORBIKE=4\n\
uint8 AEROPLANE=5\n\
uint8 BUS=6\n\
uint8 TRAIN=7\n\
uint8 TRUCK=8\n\
uint8 BOAT=9\n\
uint8 TRAFFIC_LIGHT=10\n\
uint8 FIRE_HYDRANT=11\n\
uint8 STOP_SIGN=12\n\
uint8 PARKING_METER=13\n\
uint8 BENCH=14\n\
uint8 BIRD=15\n\
uint8 CAT=16\n\
uint8 DOG=17\n\
uint8 HORSE=18\n\
uint8 SHEEP=19\n\
uint8 COW=20\n\
uint8 ELEPHANT=21\n\
uint8 BEAR=22\n\
uint8 ZEBRA=23\n\
uint8 GIRAFFE=24\n\
uint8 BACKPACK=25\n\
uint8 UMBRELLA=26\n\
uint8 HANDBAG=27\n\
uint8 TIE=28\n\
uint8 SUITCASE=29\n\
uint8 FRISBEE=30\n\
uint8 SKIS=31\n\
uint8 SNOWBOARD=32\n\
uint8 SPORTS_BALL=33\n\
uint8 KITE=34\n\
uint8 BASEBALL_BAT=35\n\
uint8 BASEBALL_GLOVE=36\n\
uint8 SKATEBOARD=37\n\
uint8 SURFBOARD=38\n\
uint8 TENNIS_RACKET=39\n\
uint8 BOTTLE=40\n\
uint8 WINE_GLASS=41\n\
uint8 CUP=42\n\
uint8 FORK=43\n\
uint8 KNIFE=44\n\
uint8 SPOON=45\n\
uint8 BOWL=46\n\
uint8 BANANA=47\n\
uint8 APPLE=48\n\
uint8 SANDWICH=49\n\
uint8 ORANGE=50\n\
uint8 BROCCOLI=51\n\
uint8 CARROT=52\n\
uint8 HOT_DOG=53\n\
uint8 PIZZA=54\n\
uint8 DONUT=55\n\
uint8 CAKE=56\n\
uint8 CHAIR=57\n\
uint8 SOFA=58\n\
uint8 POTTEDPLANT=59\n\
uint8 BED=60\n\
uint8 DININGTABLE=61\n\
uint8 TOILET=62\n\
uint8 TVMONITOR=63\n\
uint8 LAPTOP=64\n\
uint8 MOUSE=65\n\
uint8 REMOTE=66\n\
uint8 KEYBOARD=67\n\
uint8 CELL_PHONE=68\n\
uint8 MICROWAVE=69\n\
uint8 OVEN=70\n\
uint8 TOASTER=71\n\
uint8 SINK=72\n\
uint8 REFRIGERATOR=73\n\
uint8 BOOK=74\n\
uint8 CLOCK=75\n\
uint8 VASE=76\n\
uint8 SCISSORS=77\n\
uint8 TEDDY_BEAR=78\n\
uint8 HAIR_DRIER=79\n\
uint8 TOOTHBRUSH=80\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.has_orientation);
      stream.next(m.class);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::semantic_planning_msgs::ObjectDetection_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "has_orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_orientation);
    s << indent << "class: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.class);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEMANTIC_PLANNING_MSGS_MESSAGE_OBJECTDETECTION_H
