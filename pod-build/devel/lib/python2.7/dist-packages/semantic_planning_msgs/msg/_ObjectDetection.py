# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from semantic_planning_msgs/ObjectDetection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class ObjectDetection(genpy.Message):
  _md5sum = "fa8015cdd5378449d7f0e2159dec04cc"
  _type = "semantic_planning_msgs/ObjectDetection"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# message header
Header header

# unique object ID. This must be consistent across non consecutive observations
uint16 id

# 3D position of the object
geometry_msgs/Point position

# orientation of the object. Fields are [x,y,z,w]
geometry_msgs/Quaternion orientation
# indicate whether the orientation is provided
bool has_orientation

# object class. Accepts value from the object classes enum below
uint8 class

# ENUM: object classes
uint8 UNKNOWN=0
uint8 PERSON=1
uint8 BICYCLE=2
uint8 CAR=3
uint8 MOTORBIKE=4
uint8 AEROPLANE=5
uint8 BUS=6
uint8 TRAIN=7
uint8 TRUCK=8
uint8 BOAT=9
uint8 TRAFFIC_LIGHT=10
uint8 FIRE_HYDRANT=11
uint8 STOP_SIGN=12
uint8 PARKING_METER=13
uint8 BENCH=14
uint8 BIRD=15
uint8 CAT=16
uint8 DOG=17
uint8 HORSE=18
uint8 SHEEP=19
uint8 COW=20
uint8 ELEPHANT=21
uint8 BEAR=22
uint8 ZEBRA=23
uint8 GIRAFFE=24
uint8 BACKPACK=25
uint8 UMBRELLA=26
uint8 HANDBAG=27
uint8 TIE=28
uint8 SUITCASE=29
uint8 FRISBEE=30
uint8 SKIS=31
uint8 SNOWBOARD=32
uint8 SPORTS_BALL=33
uint8 KITE=34
uint8 BASEBALL_BAT=35
uint8 BASEBALL_GLOVE=36
uint8 SKATEBOARD=37
uint8 SURFBOARD=38
uint8 TENNIS_RACKET=39
uint8 BOTTLE=40
uint8 WINE_GLASS=41
uint8 CUP=42
uint8 FORK=43
uint8 KNIFE=44
uint8 SPOON=45
uint8 BOWL=46
uint8 BANANA=47
uint8 APPLE=48
uint8 SANDWICH=49
uint8 ORANGE=50
uint8 BROCCOLI=51
uint8 CARROT=52
uint8 HOT_DOG=53
uint8 PIZZA=54
uint8 DONUT=55
uint8 CAKE=56
uint8 CHAIR=57
uint8 SOFA=58
uint8 POTTEDPLANT=59
uint8 BED=60
uint8 DININGTABLE=61
uint8 TOILET=62
uint8 TVMONITOR=63
uint8 LAPTOP=64
uint8 MOUSE=65
uint8 REMOTE=66
uint8 KEYBOARD=67
uint8 CELL_PHONE=68
uint8 MICROWAVE=69
uint8 OVEN=70
uint8 TOASTER=71
uint8 SINK=72
uint8 REFRIGERATOR=73
uint8 BOOK=74
uint8 CLOCK=75
uint8 VASE=76
uint8 SCISSORS=77
uint8 TEDDY_BEAR=78
uint8 HAIR_DRIER=79
uint8 TOOTHBRUSH=80

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  UNKNOWN = 0
  PERSON = 1
  BICYCLE = 2
  CAR = 3
  MOTORBIKE = 4
  AEROPLANE = 5
  BUS = 6
  TRAIN = 7
  TRUCK = 8
  BOAT = 9
  TRAFFIC_LIGHT = 10
  FIRE_HYDRANT = 11
  STOP_SIGN = 12
  PARKING_METER = 13
  BENCH = 14
  BIRD = 15
  CAT = 16
  DOG = 17
  HORSE = 18
  SHEEP = 19
  COW = 20
  ELEPHANT = 21
  BEAR = 22
  ZEBRA = 23
  GIRAFFE = 24
  BACKPACK = 25
  UMBRELLA = 26
  HANDBAG = 27
  TIE = 28
  SUITCASE = 29
  FRISBEE = 30
  SKIS = 31
  SNOWBOARD = 32
  SPORTS_BALL = 33
  KITE = 34
  BASEBALL_BAT = 35
  BASEBALL_GLOVE = 36
  SKATEBOARD = 37
  SURFBOARD = 38
  TENNIS_RACKET = 39
  BOTTLE = 40
  WINE_GLASS = 41
  CUP = 42
  FORK = 43
  KNIFE = 44
  SPOON = 45
  BOWL = 46
  BANANA = 47
  APPLE = 48
  SANDWICH = 49
  ORANGE = 50
  BROCCOLI = 51
  CARROT = 52
  HOT_DOG = 53
  PIZZA = 54
  DONUT = 55
  CAKE = 56
  CHAIR = 57
  SOFA = 58
  POTTEDPLANT = 59
  BED = 60
  DININGTABLE = 61
  TOILET = 62
  TVMONITOR = 63
  LAPTOP = 64
  MOUSE = 65
  REMOTE = 66
  KEYBOARD = 67
  CELL_PHONE = 68
  MICROWAVE = 69
  OVEN = 70
  TOASTER = 71
  SINK = 72
  REFRIGERATOR = 73
  BOOK = 74
  CLOCK = 75
  VASE = 76
  SCISSORS = 77
  TEDDY_BEAR = 78
  HAIR_DRIER = 79
  TOOTHBRUSH = 80

  __slots__ = ['header','id','position','orientation','has_orientation','class_']
  _slot_types = ['std_msgs/Header','uint16','geometry_msgs/Point','geometry_msgs/Quaternion','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,position,orientation,has_orientation,class_

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectDetection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.has_orientation is None:
        self.has_orientation = False
      if self.class_ is None:
        self.class_ = 0
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.position = geometry_msgs.msg.Point()
      self.orientation = geometry_msgs.msg.Quaternion()
      self.has_orientation = False
      self.class_ = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_H7d2B().pack(_x.id, _x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.has_orientation, _x.class_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.id, _x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.has_orientation, _x.class_,) = _get_struct_H7d2B().unpack(str[start:end])
      self.has_orientation = bool(self.has_orientation)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_H7d2B().pack(_x.id, _x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.has_orientation, _x.class_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.id, _x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.has_orientation, _x.class_,) = _get_struct_H7d2B().unpack(str[start:end])
      self.has_orientation = bool(self.has_orientation)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H7d2B = None
def _get_struct_H7d2B():
    global _struct_H7d2B
    if _struct_H7d2B is None:
        _struct_H7d2B = struct.Struct("<H7d2B")
    return _struct_H7d2B
